// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "talkservice"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, xc method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(i32 reqSeq, ec attr, ExtendedProfile extendedProfile)")
  fmt.Fprintln(os.Stderr, "  void verifyAccountMigration(string migrationSessionId)")
  fmt.Fprintln(os.Stderr, "  void reportLocation(Geolocation location, qe trigger, ClientNetworkStatus networkStatus)")
  fmt.Fprintln(os.Stderr, "   getPaidCallBalanceList(string language)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest requests)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, gb type, string reference)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  GetFollowersResponse getFollowers(GetFollowersRequest getFollowersRequest)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, i64 announcementSeq)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updatePassword(string authSessionId, IdentityCredentialRequest request)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
  fmt.Fprintln(os.Stderr, "  void updateGroupPreferenceAttribute(i32 reqSeq, string groupMid,  updatedAttrs)")
  fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void requestCleanupUserProvidedData( dataTypes)")
  fmt.Fprintln(os.Stderr, "  BuddyStatusBar getBuddyStatusBarV2(GetBuddyStatusBarV2Request request)")
  fmt.Fprintln(os.Stderr, "  PaidCallHistoryResult getPaidCallHistory(i64 start, i32 size, string language)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  Group createGroupV2(i32 seq, string name,  contactIds)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones, string reference)")
  fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk( chatRoomMids, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getCountries(ib countryGroup)")
  fmt.Fprintln(os.Stderr, "  GetFollowingsResponse getFollowings(GetFollowingsRequest getFollowingsRequest)")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  i64 getRingbackTone()")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, di category, string report)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
  fmt.Fprintln(os.Stderr, "   findBuddyContactsByQuery(string language, string country, string query, i32 fromIndex, i32 count, a3 requestSource)")
  fmt.Fprintln(os.Stderr, "  PaidCallMetadataResult getPaidCallMetadata(string language)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements(string chatRoomMids)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "   getFriendRequests(wc direction, i64 lastSeenSeqId)")
  fmt.Fprintln(os.Stderr, "  Ringtone getRingtone()")
  fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
  fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(vh snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void removeFollower(RemoveFollowerRequest removeFollowerRequest)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(le provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
  fmt.Fprintln(os.Stderr, "  void unfollow(UnfollowRequest unfollowRequest)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroupCall(string chatMid,  memberMids, ae mediaType)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getChatRoomBGMs( chatRoomMids, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsInvited(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo, string udidHash, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(vh snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void removeFriendRequest(wc direction, string midOrEMid)")
  fmt.Fprintln(os.Stderr, "  string openAuthSession(AuthSessionRequest request)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcodeWithE2EE(string verifier, string pinCode, cc errorCode, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain)")
  fmt.Fprintln(os.Stderr, "  GetBalanceResponse getBalance(GetBalanceRequest request)")
  fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
  fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(ye type)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Room createRoomV2(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsJoined(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getRoomsV2( roomIds)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  GroupCallRoute acquireGroupCallRoute(string chatMid, ae mediaType, bool isInitialHost,  capabilities)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKey(string mid, i32 keyVersion, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, le provider, string identifier, string verifier, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupMid)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributes(i32 reqSeq, UpdateProfileAttributesRequest request)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  string decryptFollowEMid(string eMid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string searchId)")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string groupMid, string ticketId)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "   getGroupsV2( groupId)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2( attributesToRetrieve)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  ChatRoomBGM updateChatRoomBGM(i32 reqSeq, string chatRoomMid, string chatRoomBGMInfo)")
  fmt.Fprintln(os.Stderr, "  Group findGroupByTicket(string ticketId)")
  fmt.Fprintln(os.Stderr, "  FriendRequestsInfo getRecentFriendRequests(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
  fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)")
  fmt.Fprintln(os.Stderr, "  Settings getSettings(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, eb flag, string value)")
  fmt.Fprintln(os.Stderr, "  GroupCall getGroupCall(string chatMid)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(nc featureType)")
  fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, y9 type, ChatRoomAnnouncementContents contents)")
  fmt.Fprintln(os.Stderr, "  Contact findAndAddContactByMetaTag(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  void follow(FollowRequest followRequest)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updateIdentifier(string authSessionId, IdentityCredentialRequest request)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := talkservice.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Xc(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateExtendedProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err360 := (strconv.Atoi(flag.Arg(1)))
    if err360 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Ec(tmp1)
    value1 := argvalue1
    arg361 := flag.Arg(3)
    mbTrans362 := thrift.NewTMemoryBufferLen(len(arg361))
    defer mbTrans362.Close()
    _, err363 := mbTrans362.WriteString(arg361)
    if err363 != nil {
      Usage()
      return
    }
    factory364 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt365 := factory364.GetProtocol(mbTrans362)
    argvalue2 := talkservice.NewExtendedProfile()
    err366 := argvalue2.Read(jsProt365)
    if err366 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateExtendedProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyAccountMigration":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyAccountMigration requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.VerifyAccountMigration(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reportLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportLocation requires 3 args")
      flag.Usage()
    }
    arg368 := flag.Arg(1)
    mbTrans369 := thrift.NewTMemoryBufferLen(len(arg368))
    defer mbTrans369.Close()
    _, err370 := mbTrans369.WriteString(arg368)
    if err370 != nil {
      Usage()
      return
    }
    factory371 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt372 := factory371.GetProtocol(mbTrans369)
    argvalue0 := talkservice.NewGeolocation()
    err373 := argvalue0.Read(jsProt372)
    if err373 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Qe(tmp1)
    value1 := argvalue1
    arg374 := flag.Arg(3)
    mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
    defer mbTrans375.Close()
    _, err376 := mbTrans375.WriteString(arg374)
    if err376 != nil {
      Usage()
      return
    }
    factory377 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt378 := factory377.GetProtocol(mbTrans375)
    argvalue2 := talkservice.NewClientNetworkStatus()
    err379 := argvalue2.Read(jsProt378)
    if err379 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ReportLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getPaidCallBalanceList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallBalanceList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallBalanceList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg381 := flag.Arg(1)
    mbTrans382 := thrift.NewTMemoryBufferLen(len(arg381))
    defer mbTrans382.Close()
    _, err383 := mbTrans382.WriteString(arg381)
    if err383 != nil {
      Usage()
      return
    }
    factory384 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt385 := factory384.GetProtocol(mbTrans382)
    argvalue0 := talkservice.NewCreateChatRequest()
    err386 := argvalue0.Read(jsProt385)
    if err386 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err387 := (strconv.Atoi(flag.Arg(1)))
    if err387 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.Gb(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err390 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err391 := (strconv.Atoi(flag.Arg(2)))
    if err391 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg392 := flag.Arg(1)
    mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil { 
      Usage()
      return
    }
    factory395 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    containerStruct0 := talkservice.NewTalkServiceGetContactsArgs()
    err397 := containerStruct0.ReadField1(jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowers requires 1 args")
      flag.Usage()
    }
    arg398 := flag.Arg(1)
    mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue0 := talkservice.NewGetFollowersRequest()
    err403 := argvalue0.Read(jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err405 := (strconv.Atoi(flag.Arg(1)))
    if err405 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyRegistrationComplete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeChatRoomAnnouncement":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 3 args")
      flag.Usage()
    }
    tmp0, err409 := (strconv.Atoi(flag.Arg(1)))
    if err409 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err411 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err411 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RemoveChatRoomAnnouncement(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
      flag.Usage()
    }
    tmp0, err412 := (strconv.Atoi(flag.Arg(1)))
    if err412 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err415 := (strconv.Atoi(flag.Arg(4)))
    if err415 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updatePassword":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdatePassword requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg417 := flag.Arg(2)
    mbTrans418 := thrift.NewTMemoryBufferLen(len(arg417))
    defer mbTrans418.Close()
    _, err419 := mbTrans418.WriteString(arg417)
    if err419 != nil {
      Usage()
      return
    }
    factory420 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt421 := factory420.GetProtocol(mbTrans418)
    argvalue1 := talkservice.NewIdentityCredentialRequest()
    err422 := argvalue1.Read(jsProt421)
    if err422 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdatePassword(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
      flag.Usage()
    }
    tmp0, err423 := (strconv.Atoi(flag.Arg(1)))
    if err423 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateGroupPreferenceAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateGroupPreferenceAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err426 := (strconv.Atoi(flag.Arg(1)))
    if err426 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg428 := flag.Arg(3)
    mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
    defer mbTrans429.Close()
    _, err430 := mbTrans429.WriteString(arg428)
    if err430 != nil { 
      Usage()
      return
    }
    factory431 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt432 := factory431.GetProtocol(mbTrans429)
    containerStruct2 := talkservice.NewTalkServiceUpdateGroupPreferenceAttributeArgs()
    err433 := containerStruct2.ReadField3(jsProt432)
    if err433 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.UpdatedAttrs
    value2 := argvalue2
    fmt.Print(client.UpdateGroupPreferenceAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredentialWithResult":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 2 args")
      flag.Usage()
    }
    arg434 := flag.Arg(1)
    mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
    defer mbTrans435.Close()
    _, err436 := mbTrans435.WriteString(arg434)
    if err436 != nil {
      Usage()
      return
    }
    factory437 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt438 := factory437.GetProtocol(mbTrans435)
    argvalue0 := talkservice.NewIdentityCredential()
    err439 := argvalue0.Read(jsProt438)
    if err439 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "requestCleanupUserProvidedData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestCleanupUserProvidedData requires 1 args")
      flag.Usage()
    }
    arg441 := flag.Arg(1)
    mbTrans442 := thrift.NewTMemoryBufferLen(len(arg441))
    defer mbTrans442.Close()
    _, err443 := mbTrans442.WriteString(arg441)
    if err443 != nil { 
      Usage()
      return
    }
    factory444 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt445 := factory444.GetProtocol(mbTrans442)
    containerStruct0 := talkservice.NewTalkServiceRequestCleanupUserProvidedDataArgs()
    err446 := containerStruct0.ReadField1(jsProt445)
    if err446 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.DataTypes
    value0 := argvalue0
    fmt.Print(client.RequestCleanupUserProvidedData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyStatusBarV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBuddyStatusBarV2 requires 1 args")
      flag.Usage()
    }
    arg447 := flag.Arg(1)
    mbTrans448 := thrift.NewTMemoryBufferLen(len(arg447))
    defer mbTrans448.Close()
    _, err449 := mbTrans448.WriteString(arg447)
    if err449 != nil {
      Usage()
      return
    }
    factory450 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt451 := factory450.GetProtocol(mbTrans448)
    argvalue0 := talkservice.NewGetBuddyStatusBarV2Request()
    err452 := argvalue0.Read(jsProt451)
    if err452 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBuddyStatusBarV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallHistory":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPaidCallHistory requires 3 args")
      flag.Usage()
    }
    argvalue0, err453 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err453 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err454 := (strconv.Atoi(flag.Arg(2)))
    if err454 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPaidCallHistory(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err456 := (strconv.Atoi(flag.Arg(1)))
    if err456 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createGroupV2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateGroupV2 requires 3 args")
      flag.Usage()
    }
    tmp0, err458 := (strconv.Atoi(flag.Arg(1)))
    if err458 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg460 := flag.Arg(3)
    mbTrans461 := thrift.NewTMemoryBufferLen(len(arg460))
    defer mbTrans461.Close()
    _, err462 := mbTrans461.WriteString(arg460)
    if err462 != nil { 
      Usage()
      return
    }
    factory463 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt464 := factory463.GetProtocol(mbTrans461)
    containerStruct2 := talkservice.NewTalkServiceCreateGroupV2Args()
    err465 := containerStruct2.ReadField3(jsProt464)
    if err465 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateGroupV2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 3 args")
      flag.Usage()
    }
    tmp0, err466 := (strconv.Atoi(flag.Arg(1)))
    if err466 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg467 := flag.Arg(2)
    mbTrans468 := thrift.NewTMemoryBufferLen(len(arg467))
    defer mbTrans468.Close()
    _, err469 := mbTrans468.WriteString(arg467)
    if err469 != nil { 
      Usage()
      return
    }
    factory470 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt471 := factory470.GetProtocol(mbTrans468)
    containerStruct1 := talkservice.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err472 := containerStruct1.ReadField2(jsProt471)
    if err472 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAcceptedProximityMatches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 2 args")
      flag.Usage()
    }
    arg475 := flag.Arg(1)
    mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
    defer mbTrans476.Close()
    _, err477 := mbTrans476.WriteString(arg475)
    if err477 != nil { 
      Usage()
      return
    }
    factory478 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt479 := factory478.GetProtocol(mbTrans476)
    containerStruct0 := talkservice.NewTalkServiceGetChatRoomAnnouncementsBulkArgs()
    err480 := containerStruct0.ReadField1(jsProt479)
    if err480 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getCountries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCountries requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Ib(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCountries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowings requires 1 args")
      flag.Usage()
    }
    arg481 := flag.Arg(1)
    mbTrans482 := thrift.NewTMemoryBufferLen(len(arg481))
    defer mbTrans482.Close()
    _, err483 := mbTrans482.WriteString(arg481)
    if err483 != nil {
      Usage()
      return
    }
    factory484 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt485 := factory484.GetProtocol(mbTrans482)
    argvalue0 := talkservice.NewGetFollowingsRequest()
    err486 := argvalue0.Read(jsProt485)
    if err486 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getRingbackTone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingbackTone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingbackTone(context.Background()))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterWithPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Report requires 3 args")
      flag.Usage()
    }
    argvalue0, err489 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err489 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Di(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Report(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err491 := (strconv.Atoi(flag.Arg(1)))
    if err491 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err493 := (strconv.Atoi(flag.Arg(1)))
    if err493 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg494 := flag.Arg(2)
    mbTrans495 := thrift.NewTMemoryBufferLen(len(arg494))
    defer mbTrans495.Close()
    _, err496 := mbTrans495.WriteString(arg494)
    if err496 != nil {
      Usage()
      return
    }
    factory497 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt498 := factory497.GetProtocol(mbTrans495)
    argvalue1 := talkservice.NewGroup()
    err499 := argvalue1.Read(jsProt498)
    if err499 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findBuddyContactsByQuery":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "FindBuddyContactsByQuery requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err503 := (strconv.Atoi(flag.Arg(4)))
    if err503 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err504 := (strconv.Atoi(flag.Arg(5)))
    if err504 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := talkservice.A3(tmp5)
    value5 := argvalue5
    fmt.Print(client.FindBuddyContactsByQuery(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getPaidCallMetadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallMetadata requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err506 := (strconv.Atoi(flag.Arg(1)))
    if err506 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
      flag.Usage()
    }
    tmp0, err508 := (strconv.Atoi(flag.Arg(1)))
    if err508 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg511 := flag.Arg(1)
    mbTrans512 := thrift.NewTMemoryBufferLen(len(arg511))
    defer mbTrans512.Close()
    _, err513 := mbTrans512.WriteString(arg511)
    if err513 != nil {
      Usage()
      return
    }
    factory514 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt515 := factory514.GetProtocol(mbTrans512)
    argvalue0 := talkservice.NewGetAllChatMidsRequest()
    err516 := argvalue0.Read(jsProt515)
    if err516 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getFriendRequests":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Wc(tmp0)
    value0 := argvalue0
    argvalue1, err518 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err518 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRingtone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingtone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingtone(context.Background()))
    fmt.Print("\n")
    break
  case "notifySleep":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
      flag.Usage()
    }
    argvalue0, err519 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err519 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err520 := (strconv.Atoi(flag.Arg(2)))
    if err520 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.NotifySleep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWithSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Vh(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg522 := flag.Arg(3)
    mbTrans523 := thrift.NewTMemoryBufferLen(len(arg522))
    defer mbTrans523.Close()
    _, err524 := mbTrans523.WriteString(arg522)
    if err524 != nil {
      Usage()
      return
    }
    factory525 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt526 := factory525.GetProtocol(mbTrans523)
    argvalue2 := talkservice.NewIdentityCredential()
    err527 := argvalue2.Read(jsProt526)
    if err527 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg530 := flag.Arg(6)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue5 := talkservice.NewDeviceInfo()
    err535 := argvalue5.Read(jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "removeFollower":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveFollower requires 1 args")
      flag.Usage()
    }
    arg537 := flag.Arg(1)
    mbTrans538 := thrift.NewTMemoryBufferLen(len(arg537))
    defer mbTrans538.Close()
    _, err539 := mbTrans538.WriteString(arg537)
    if err539 != nil {
      Usage()
      return
    }
    factory540 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt541 := factory540.GetProtocol(mbTrans538)
    argvalue0 := talkservice.NewRemoveFollowerRequest()
    err542 := argvalue0.Read(jsProt541)
    if err542 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveFollower(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Le(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendEchoPush":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendEchoPush(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unfollow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unfollow requires 1 args")
      flag.Usage()
    }
    arg546 := flag.Arg(1)
    mbTrans547 := thrift.NewTMemoryBufferLen(len(arg546))
    defer mbTrans547.Close()
    _, err548 := mbTrans547.WriteString(arg546)
    if err548 != nil {
      Usage()
      return
    }
    factory549 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt550 := factory549.GetProtocol(mbTrans547)
    argvalue0 := talkservice.NewUnfollowRequest()
    err551 := argvalue0.Read(jsProt550)
    if err551 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unfollow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroupCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroupCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg553 := flag.Arg(2)
    mbTrans554 := thrift.NewTMemoryBufferLen(len(arg553))
    defer mbTrans554.Close()
    _, err555 := mbTrans554.WriteString(arg553)
    if err555 != nil { 
      Usage()
      return
    }
    factory556 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt557 := factory556.GetProtocol(mbTrans554)
    containerStruct1 := talkservice.NewTalkServiceInviteIntoGroupCallArgs()
    err558 := containerStruct1.ReadField2(jsProt557)
    if err558 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.Ae(tmp2)
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroupCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg559 := flag.Arg(1)
    mbTrans560 := thrift.NewTMemoryBufferLen(len(arg559))
    defer mbTrans560.Close()
    _, err561 := mbTrans560.WriteString(arg559)
    if err561 != nil {
      Usage()
      return
    }
    factory562 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt563 := factory562.GetProtocol(mbTrans560)
    argvalue0 := talkservice.NewCancelChatInvitationRequest()
    err564 := argvalue0.Read(jsProt563)
    if err564 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findChatByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
      flag.Usage()
    }
    arg565 := flag.Arg(1)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil {
      Usage()
      return
    }
    factory568 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    argvalue0 := talkservice.NewFindChatByTicketRequest()
    err570 := argvalue0.Read(jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindChatByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetAllContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomBGMs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChatRoomBGMs requires 2 args")
      flag.Usage()
    }
    arg571 := flag.Arg(1)
    mbTrans572 := thrift.NewTMemoryBufferLen(len(arg571))
    defer mbTrans572.Close()
    _, err573 := mbTrans572.WriteString(arg571)
    if err573 != nil { 
      Usage()
      return
    }
    factory574 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt575 := factory574.GetProtocol(mbTrans572)
    containerStruct0 := talkservice.NewTalkServiceGetChatRoomBGMsArgs()
    err576 := containerStruct0.ReadField1(jsProt575)
    if err576 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetChatRoomBGMs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err577 := (strconv.Atoi(flag.Arg(1)))
    if err577 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err579 := (strconv.Atoi(flag.Arg(3)))
    if err579 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
      flag.Usage()
    }
    argvalue0, err580 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err580 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err581 := (strconv.Atoi(flag.Arg(2)))
    if err581 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchOperations(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getGroupIdsInvited":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetGroupIdsInvited(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 4 args")
      flag.Usage()
    }
    argvalue0, err582 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err582 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg583 := flag.Arg(2)
    mbTrans584 := thrift.NewTMemoryBufferLen(len(arg583))
    defer mbTrans584.Close()
    _, err585 := mbTrans584.WriteString(arg583)
    if err585 != nil {
      Usage()
      return
    }
    factory586 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt587 := factory586.GetProtocol(mbTrans584)
    argvalue1 := talkservice.NewDeviceInfo()
    err588 := argvalue1.Read(jsProt587)
    if err588 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithSnsId":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Vh(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg594 := flag.Arg(5)
    mbTrans595 := thrift.NewTMemoryBufferLen(len(arg594))
    defer mbTrans595.Close()
    _, err596 := mbTrans595.WriteString(arg594)
    if err596 != nil {
      Usage()
      return
    }
    factory597 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt598 := factory597.GetProtocol(mbTrans595)
    argvalue4 := talkservice.NewDeviceInfo()
    err599 := argvalue4.Read(jsProt598)
    if err599 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "removeFriendRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Wc(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openAuthSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenAuthSession requires 1 args")
      flag.Usage()
    }
    arg603 := flag.Arg(1)
    mbTrans604 := thrift.NewTMemoryBufferLen(len(arg603))
    defer mbTrans604.Close()
    _, err605 := mbTrans604.WriteString(arg603)
    if err605 != nil {
      Usage()
      return
    }
    factory606 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt607 := factory606.GetProtocol(mbTrans604)
    argvalue0 := talkservice.NewAuthSessionRequest()
    err608 := argvalue0.Read(jsProt607)
    if err608 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenAuthSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyQrcodeWithE2EE":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "VerifyQrcodeWithE2EE requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.Cc(tmp2)
    value2 := argvalue2
    arg611 := flag.Arg(4)
    mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue3 := talkservice.NewE2EEPublicKey()
    err616 := argvalue3.Read(jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    fmt.Print(client.VerifyQrcodeWithE2EE(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBalance requires 1 args")
      flag.Usage()
    }
    arg619 := flag.Arg(1)
    mbTrans620 := thrift.NewTMemoryBufferLen(len(arg619))
    defer mbTrans620.Close()
    _, err621 := mbTrans620.WriteString(arg619)
    if err621 != nil {
      Usage()
      return
    }
    factory622 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt623 := factory622.GetProtocol(mbTrans620)
    argvalue0 := talkservice.NewGetBalanceRequest()
    err624 := argvalue0.Read(jsProt623)
    if err624 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBalance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupWithoutMembers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Ye(tmp0)
    value0 := argvalue0
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "cancelGroupInvitation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
      flag.Usage()
    }
    tmp0, err633 := (strconv.Atoi(flag.Arg(1)))
    if err633 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg635 := flag.Arg(3)
    mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
    defer mbTrans636.Close()
    _, err637 := mbTrans636.WriteString(arg635)
    if err637 != nil { 
      Usage()
      return
    }
    factory638 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt639 := factory638.GetProtocol(mbTrans636)
    containerStruct2 := talkservice.NewTalkServiceCancelGroupInvitationArgs()
    err640 := containerStruct2.ReadField3(jsProt639)
    if err640 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoomV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoomV2 requires 2 args")
      flag.Usage()
    }
    tmp0, err641 := (strconv.Atoi(flag.Arg(1)))
    if err641 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg642 := flag.Arg(2)
    mbTrans643 := thrift.NewTMemoryBufferLen(len(arg642))
    defer mbTrans643.Close()
    _, err644 := mbTrans643.WriteString(arg642)
    if err644 != nil { 
      Usage()
      return
    }
    factory645 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt646 := factory645.GetProtocol(mbTrans643)
    containerStruct1 := talkservice.NewTalkServiceCreateRoomV2Args()
    err647 := containerStruct1.ReadField2(jsProt646)
    if err647 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoomV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactByMetaTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindContactByMetaTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg650 := flag.Arg(1)
    mbTrans651 := thrift.NewTMemoryBufferLen(len(arg650))
    defer mbTrans651.Close()
    _, err652 := mbTrans651.WriteString(arg650)
    if err652 != nil {
      Usage()
      return
    }
    factory653 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt654 := factory653.GetProtocol(mbTrans651)
    argvalue0 := talkservice.NewGetChatsRequest()
    err655 := argvalue0.Read(jsProt654)
    if err655 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupIdsJoined":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetGroupIdsJoined(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoomsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomsV2 requires 1 args")
      flag.Usage()
    }
    arg656 := flag.Arg(1)
    mbTrans657 := thrift.NewTMemoryBufferLen(len(arg656))
    defer mbTrans657.Close()
    _, err658 := mbTrans657.WriteString(arg656)
    if err658 != nil { 
      Usage()
      return
    }
    factory659 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt660 := factory659.GetProtocol(mbTrans657)
    containerStruct0 := talkservice.NewTalkServiceGetRoomsV2Args()
    err661 := containerStruct0.ReadField1(jsProt660)
    if err661 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RoomIds
    value0 := argvalue0
    fmt.Print(client.GetRoomsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg662 := flag.Arg(1)
    mbTrans663 := thrift.NewTMemoryBufferLen(len(arg662))
    defer mbTrans663.Close()
    _, err664 := mbTrans663.WriteString(arg662)
    if err664 != nil {
      Usage()
      return
    }
    factory665 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt666 := factory665.GetProtocol(mbTrans663)
    argvalue0 := talkservice.NewReissueChatTicketRequest()
    err667 := argvalue0.Read(jsProt666)
    if err667 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err668 := (strconv.Atoi(flag.Arg(1)))
    if err668 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg669 := flag.Arg(2)
    mbTrans670 := thrift.NewTMemoryBufferLen(len(arg669))
    defer mbTrans670.Close()
    _, err671 := mbTrans670.WriteString(arg669)
    if err671 != nil {
      Usage()
      return
    }
    factory672 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt673 := factory672.GetProtocol(mbTrans670)
    argvalue1 := talkservice.NewMessage()
    err674 := argvalue1.Read(jsProt673)
    if err674 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err675 := (strconv.Atoi(flag.Arg(1)))
    if err675 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acquireGroupCallRoute":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AcquireGroupCallRoute requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Ae(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg679 := flag.Arg(4)
    mbTrans680 := thrift.NewTMemoryBufferLen(len(arg679))
    defer mbTrans680.Close()
    _, err681 := mbTrans680.WriteString(arg679)
    if err681 != nil { 
      Usage()
      return
    }
    factory682 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt683 := factory682.GetProtocol(mbTrans680)
    containerStruct3 := talkservice.NewTalkServiceAcquireGroupCallRouteArgs()
    err684 := containerStruct3.ReadField4(jsProt683)
    if err684 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Capabilities
    value3 := argvalue3
    fmt.Print(client.AcquireGroupCallRoute(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "acceptChatInvitationByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
      flag.Usage()
    }
    arg685 := flag.Arg(1)
    mbTrans686 := thrift.NewTMemoryBufferLen(len(arg685))
    defer mbTrans686.Close()
    _, err687 := mbTrans686.WriteString(arg685)
    if err687 != nil {
      Usage()
      return
    }
    factory688 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt689 := factory688.GetProtocol(mbTrans686)
    argvalue0 := talkservice.NewAcceptChatInvitationByTicketRequest()
    err690 := argvalue0.Read(jsProt689)
    if err690 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err693 := (strconv.Atoi(flag.Arg(2)))
    if err693 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err694 := (strconv.Atoi(flag.Arg(3)))
    if err694 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerDeviceWithIdentityCredential":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Le(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "reissueGroupTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ReissueGroupTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributes requires 2 args")
      flag.Usage()
    }
    tmp0, err700 := (strconv.Atoi(flag.Arg(1)))
    if err700 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg701 := flag.Arg(2)
    mbTrans702 := thrift.NewTMemoryBufferLen(len(arg701))
    defer mbTrans702.Close()
    _, err703 := mbTrans702.WriteString(arg701)
    if err703 != nil {
      Usage()
      return
    }
    factory704 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt705 := factory704.GetProtocol(mbTrans702)
    argvalue1 := talkservice.NewUpdateProfileAttributesRequest()
    err706 := argvalue1.Read(jsProt705)
    if err706 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg709 := flag.Arg(1)
    mbTrans710 := thrift.NewTMemoryBufferLen(len(arg709))
    defer mbTrans710.Close()
    _, err711 := mbTrans710.WriteString(arg709)
    if err711 != nil {
      Usage()
      return
    }
    factory712 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt713 := factory712.GetProtocol(mbTrans710)
    argvalue0 := talkservice.NewAcceptChatInvitationRequest()
    err714 := argvalue0.Read(jsProt713)
    if err714 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "decryptFollowEMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DecryptFollowEMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DecryptFollowEMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg717 := flag.Arg(1)
    mbTrans718 := thrift.NewTMemoryBufferLen(len(arg717))
    defer mbTrans718.Close()
    _, err719 := mbTrans718.WriteString(arg717)
    if err719 != nil {
      Usage()
      return
    }
    factory720 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt721 := factory720.GetProtocol(mbTrans718)
    argvalue0 := talkservice.NewInviteIntoChatRequest()
    err722 := argvalue0.Read(jsProt721)
    if err722 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptGroupInvitationByTicket":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
      flag.Usage()
    }
    tmp0, err723 := (strconv.Atoi(flag.Arg(1)))
    if err723 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AcceptGroupInvitationByTicket(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg726 := flag.Arg(1)
    mbTrans727 := thrift.NewTMemoryBufferLen(len(arg726))
    defer mbTrans727.Close()
    _, err728 := mbTrans727.WriteString(arg726)
    if err728 != nil {
      Usage()
      return
    }
    factory729 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt730 := factory729.GetProtocol(mbTrans727)
    argvalue0 := talkservice.NewDeleteOtherFromChatRequest()
    err731 := argvalue0.Read(jsProt730)
    if err731 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg732 := flag.Arg(1)
    mbTrans733 := thrift.NewTMemoryBufferLen(len(arg732))
    defer mbTrans733.Close()
    _, err734 := mbTrans733.WriteString(arg732)
    if err734 != nil { 
      Usage()
      return
    }
    factory735 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt736 := factory735.GetProtocol(mbTrans733)
    containerStruct0 := talkservice.NewTalkServiceFindContactsByPhoneArgs()
    err737 := containerStruct0.ReadField1(jsProt736)
    if err737 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsV2 requires 1 args")
      flag.Usage()
    }
    arg738 := flag.Arg(1)
    mbTrans739 := thrift.NewTMemoryBufferLen(len(arg738))
    defer mbTrans739.Close()
    _, err740 := mbTrans739.WriteString(arg738)
    if err740 != nil { 
      Usage()
      return
    }
    factory741 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt742 := factory741.GetProtocol(mbTrans739)
    containerStruct0 := talkservice.NewTalkServiceGetGroupsV2Args()
    err743 := containerStruct0.ReadField1(jsProt742)
    if err743 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupId
    value0 := argvalue0
    fmt.Print(client.GetGroupsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err744 := (strconv.Atoi(flag.Arg(1)))
    if err744 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg746 := flag.Arg(3)
    mbTrans747 := thrift.NewTMemoryBufferLen(len(arg746))
    defer mbTrans747.Close()
    _, err748 := mbTrans747.WriteString(arg746)
    if err748 != nil { 
      Usage()
      return
    }
    factory749 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt750 := factory749.GetProtocol(mbTrans747)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoGroupArgs()
    err751 := containerStruct2.ReadField3(jsProt750)
    if err751 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err752 := (strconv.Atoi(flag.Arg(1)))
    if err752 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg754 := flag.Arg(1)
    mbTrans755 := thrift.NewTMemoryBufferLen(len(arg754))
    defer mbTrans755.Close()
    _, err756 := mbTrans755.WriteString(arg754)
    if err756 != nil {
      Usage()
      return
    }
    factory757 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt758 := factory757.GetProtocol(mbTrans755)
    argvalue0 := talkservice.NewDeleteSelfFromChatRequest()
    err759 := argvalue0.Read(jsProt758)
    if err759 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 1 args")
      flag.Usage()
    }
    arg760 := flag.Arg(1)
    mbTrans761 := thrift.NewTMemoryBufferLen(len(arg760))
    defer mbTrans761.Close()
    _, err762 := mbTrans761.WriteString(arg760)
    if err762 != nil { 
      Usage()
      return
    }
    factory763 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt764 := factory763.GetProtocol(mbTrans761)
    containerStruct0 := talkservice.NewTalkServiceGetSettingsAttributes2Args()
    err765 := containerStruct0.ReadField1(jsProt764)
    if err765 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.AttributesToRetrieve
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err766 := (strconv.Atoi(flag.Arg(1)))
    if err766 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg768 := flag.Arg(3)
    mbTrans769 := thrift.NewTMemoryBufferLen(len(arg768))
    defer mbTrans769.Close()
    _, err770 := mbTrans769.WriteString(arg768)
    if err770 != nil { 
      Usage()
      return
    }
    factory771 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt772 := factory771.GetProtocol(mbTrans769)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoRoomArgs()
    err773 := containerStruct2.ReadField3(jsProt772)
    if err773 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg774 := flag.Arg(1)
    mbTrans775 := thrift.NewTMemoryBufferLen(len(arg774))
    defer mbTrans775.Close()
    _, err776 := mbTrans775.WriteString(arg774)
    if err776 != nil {
      Usage()
      return
    }
    factory777 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt778 := factory777.GetProtocol(mbTrans775)
    argvalue0 := talkservice.NewRejectChatInvitationRequest()
    err779 := argvalue0.Read(jsProt778)
    if err779 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChatRoomBGM":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateChatRoomBGM requires 3 args")
      flag.Usage()
    }
    tmp0, err780 := (strconv.Atoi(flag.Arg(1)))
    if err780 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateChatRoomBGM(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findGroupByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentFriendRequests":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecentFriendRequests requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecentFriendRequests(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
      flag.Usage()
    }
    tmp0, err784 := (strconv.Atoi(flag.Arg(1)))
    if err784 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err785 := (strconv.Atoi(flag.Arg(1)))
    if err785 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg787 := flag.Arg(1)
    mbTrans788 := thrift.NewTMemoryBufferLen(len(arg787))
    defer mbTrans788.Close()
    _, err789 := mbTrans788.WriteString(arg787)
    if err789 != nil {
      Usage()
      return
    }
    factory790 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt791 := factory790.GetProtocol(mbTrans788)
    argvalue0 := talkservice.NewUpdateChatRequest()
    err792 := argvalue0.Read(jsProt791)
    if err792 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
      flag.Usage()
    }
    tmp0, err793 := (strconv.Atoi(flag.Arg(1)))
    if err793 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg794 := flag.Arg(2)
    mbTrans795 := thrift.NewTMemoryBufferLen(len(arg794))
    defer mbTrans795.Close()
    _, err796 := mbTrans795.WriteString(arg794)
    if err796 != nil { 
      Usage()
      return
    }
    factory797 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt798 := factory797.GetProtocol(mbTrans795)
    containerStruct1 := talkservice.NewTalkServiceUpdateSettingsAttributes2Args()
    err799 := containerStruct1.ReadField2(jsProt798)
    if err799 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.AttributesToUpdate
    value1 := argvalue1
    arg800 := flag.Arg(3)
    mbTrans801 := thrift.NewTMemoryBufferLen(len(arg800))
    defer mbTrans801.Close()
    _, err802 := mbTrans801.WriteString(arg800)
    if err802 != nil {
      Usage()
      return
    }
    factory803 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt804 := factory803.GetProtocol(mbTrans801)
    argvalue2 := talkservice.NewSettings()
    err805 := argvalue2.Read(jsProt804)
    if err805 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err806 := (strconv.Atoi(flag.Arg(1)))
    if err806 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err808 := (strconv.Atoi(flag.Arg(1)))
    if err808 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.Eb(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getGroupCall":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupCall requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupCall(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err812 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err812 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err813 := (strconv.Atoi(flag.Arg(2)))
    if err813 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err814 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err814 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err815 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err815 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "kickoutFromGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err816 := (strconv.Atoi(flag.Arg(1)))
    if err816 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg818 := flag.Arg(3)
    mbTrans819 := thrift.NewTMemoryBufferLen(len(arg818))
    defer mbTrans819.Close()
    _, err820 := mbTrans819.WriteString(arg818)
    if err820 != nil { 
      Usage()
      return
    }
    factory821 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt822 := factory821.GetProtocol(mbTrans819)
    containerStruct2 := talkservice.NewTalkServiceKickoutFromGroupArgs()
    err823 := containerStruct2.ReadField3(jsProt822)
    if err823 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Nc(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChatRoomAnnouncement":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 4 args")
      flag.Usage()
    }
    tmp0, err824 := (strconv.Atoi(flag.Arg(1)))
    if err824 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.Y9(tmp2)
    value2 := argvalue2
    arg826 := flag.Arg(4)
    mbTrans827 := thrift.NewTMemoryBufferLen(len(arg826))
    defer mbTrans827.Close()
    _, err828 := mbTrans827.WriteString(arg826)
    if err828 != nil {
      Usage()
      return
    }
    factory829 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt830 := factory829.GetProtocol(mbTrans827)
    argvalue3 := talkservice.NewChatRoomAnnouncementContents()
    err831 := argvalue3.Read(jsProt830)
    if err831 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.CreateChatRoomAnnouncement(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactByMetaTag":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactByMetaTag requires 3 args")
      flag.Usage()
    }
    tmp0, err832 := (strconv.Atoi(flag.Arg(1)))
    if err832 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactByMetaTag(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "follow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Follow requires 1 args")
      flag.Usage()
    }
    arg835 := flag.Arg(1)
    mbTrans836 := thrift.NewTMemoryBufferLen(len(arg835))
    defer mbTrans836.Close()
    _, err837 := mbTrans836.WriteString(arg835)
    if err837 != nil {
      Usage()
      return
    }
    factory838 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt839 := factory838.GetProtocol(mbTrans836)
    argvalue0 := talkservice.NewFollowRequest()
    err840 := argvalue0.Read(jsProt839)
    if err840 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Follow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err842 := (strconv.Atoi(flag.Arg(1)))
    if err842 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err844 := (strconv.Atoi(flag.Arg(1)))
    if err844 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err847 := (strconv.Atoi(flag.Arg(4)))
    if err847 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateIdentifier":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateIdentifier requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg849 := flag.Arg(2)
    mbTrans850 := thrift.NewTMemoryBufferLen(len(arg849))
    defer mbTrans850.Close()
    _, err851 := mbTrans850.WriteString(arg849)
    if err851 != nil {
      Usage()
      return
    }
    factory852 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt853 := factory852.GetProtocol(mbTrans850)
    argvalue1 := talkservice.NewIdentityCredentialRequest()
    err854 := argvalue1.Read(jsProt853)
    if err854 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateIdentifier(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
